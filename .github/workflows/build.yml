name: Build Moonlight Qt

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false  # 允许单个作业失败，不影响其他平台
      matrix:
        platform:
          - name: Windows
            os: windows-latest
            qt_version: 6.8.0
            qt_arch: win64_msvc2022_64
            artifact_prefix: MoonlightPortable
          - name: macOS
            os: macos-latest
            qt_version: 6.6.0
            qt_arch: clang_64  # 修正为官方架构名clang_64
            artifact_prefix: Moonlight
          - name: Linux
            os: ubuntu-20.04
            qt_version: 5.15.4
            artifact_prefix: Moonlight
          - name: Steam Link
            os: ubuntu-16.04
            artifact_prefix: Moonlight-SteamLink

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get version from tag (if available)
        id: get_version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" =~ ^v ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "VERSION=$(cat app/version.txt)" >> $GITHUB_ENV
          fi
        shell: bash

      # Windows依赖
      - name: Setup Windows dependencies
        if: matrix.platform.name == 'Windows'
        run: |
          choco install 7zip -y
          echo "PATH=$env:PATH;C:\Program Files\7-Zip" >> $GITHUB_ENV

      # 正确安装Qt（修复架构参数）
      - name: Setup Qt (Windows/macOS)
        if: matrix.platform.name != 'Linux' && matrix.platform.name != 'Steam Link'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.platform.qt_version }}
          arch: ${{ matrix.platform.qt_arch }}  # 动态使用matrix中的架构
          cache: true

      # Linux依赖（保持不变）
      - name: Setup Linux dependencies
        if: matrix.platform.name == 'Linux'
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.4-focal -y
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-focal.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-focal.list
          sudo apt update
          sudo apt install -y qt515base qt515quickcontrols2 qt515svg qt515wayland python3-pip nasm libgbm-dev libdrm-dev libfreetype6-dev libasound2-dev libdbus-1-dev libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev libpulse-dev libudev-dev libx11-dev libxcursor-dev libxext-dev libxi-dev libxinerama-dev libxkbcommon-dev libxrandr-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxcb-dri3-dev libx11-xcb-dev wayland-protocols libopus-dev libvdpau-dev vulkan-sdk
          sudo pip3 install meson
          
          # （中间构建依赖的命令保持不变，此处省略重复内容）

      # Steam Link依赖（保持不变）
      - name: Setup Steam Link dependencies
        if: matrix.platform.name == 'Steam Link'
        run: |
          sudo apt install -y libc6:i386 libstdc++6:i386
          git clone --depth=1 https://github.com/ValveSoftware/steamlink-sdk.git $HOME/steamlink-sdk
          echo "STEAMLINK_SDK_PATH=$HOME/steamlink-sdk" >> $GITHUB_ENV

      # 构建步骤（保持不变，确保脚本路径正确）
      - name: Build Windows
        if: matrix.platform.name == 'Windows'
        run: |
          copy /y scripts\appveyor\qmake.bat ${{ env.Qt6_DIR }}\bin\
          copy /y scripts\appveyor\qtpaths.bat ${{ env.Qt6_DIR }}\bin\
          copy /y scripts\appveyor\target_qt.conf ${{ env.Qt6_DIR }}\bin\
          
          set PATH=%PATH%;${{ env.Qt6_DIR }}\bin
          scripts\build-arch.bat Release x64
          scripts\build-arch.bat Release arm64
          scripts\generate-bundle.bat Release
        shell: cmd

      - name: Build macOS
        if: matrix.platform.name == 'macOS'
        run: |
          nvm use node
          npm install --global create-dmg
          PATH=$PATH:${{ env.Qt6_DIR }}/bin scripts/generate-dmg.sh Release

      - name: Build Linux
        if: matrix.platform.name == 'Linux'
        run: |
          source /opt/qt515/bin/qt515-env.sh
          PATH=$PATH:$HOME/bin scripts/build-appimage.sh

      - name: Build Steam Link
        if: matrix.platform.name == 'Steam Link'
        run: |
          scripts/build-steamlink-app.sh

      # 产物上传（保持不变）
      - name: Upload Windows artifacts
        if: matrix.platform.name == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_prefix }}-x64-${{ env.VERSION }}
          path: build/installer-x64-Release/*.zip

      - name: Upload macOS artifacts
        if: matrix.platform.name == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_prefix }}-${{ env.VERSION }}
          path: build/installer-Release/*.dmg

      - name: Upload Linux artifacts
        if: matrix.platform.name == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_prefix }}-${{ env.VERSION }}-x86_64
          path: build/installer-release/*.AppImage

      - name: Upload Steam Link artifacts
        if: matrix.platform.name == 'Steam Link'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_prefix }}-${{ env.VERSION }}
          path: build/installer-release/*.zip
